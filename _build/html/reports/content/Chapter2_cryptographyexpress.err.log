Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/asyncio/base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
## Pros and Cons of Symmetric-key Cryptography

Pros:
1. It's fast! Great for encrypting large amounts of data.
2. Uses less computational power than some other methods.
3. The algorithms are well-studied and considered secure (when used correctly).

Cons:
1. The big challenge: how do you securely share the key?
2. You need a different key for each person you communicate with securely.
3. If the key is compromised, all messages encrypted with it are at risk.

## Real-world Applications

1. Securing your WhatsApp messages
2. Protecting data stored on your computer
3. Securing communication between your browser and websites (as part of HTTPS)

## What We Learned
- Symmetric-key cryptography uses the same key for encryption and decryption.
- It's like a secret language between friends.
- The Caesar Cipher is a simple (but insecure) example.
- Modern algorithms like AES are much more complex and secure.
- It's fast and efficient, but key distribution is a challenge.

## Quick Check: Did You Get It?

Let's see if you caught the main ideas:

1. In symmetric encryption, what's the same for both sender and receiver? (Hint: It starts with 'K')
2. What's the name of the ancient Roman who used a simple cipher? (Hint: Think salad)
3. What does AES stand for? (Hint: It's Advanced, and it's a Standard)

Think about your answers, then check below!

<details>
<summary>Click to see the answers</summary>

1. Key
2. Caesar
3. Advanced Encryption Standard

Great job if you got them all!
</details>
------------------


[0;36m  Cell [0;32mIn[3], line 4[0;36m[0m
[0;31m    1. It's fast! Great for encrypting large amounts of data.[0m
[0m         ^[0m
[0;31mSyntaxError[0m[0;31m:[0m unterminated string literal (detected at line 4)


